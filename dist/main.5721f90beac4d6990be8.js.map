{"version":3,"file":"main.5721f90beac4d6990be8.js","mappings":";;;;;;;;;AAAA;AACA,yBAAyB;AACzB,yBAAyB;AACzB;AACA,wBAAwB,SAAS;AACjC,uBAAuB,SAAS;AAChC;AACA,wBAAwB;AACxB;AACA,8BAA8B;AAC9B,kCAAkC,oFAAoF,EAAE;;;;;;UCVxH;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;ACtBa;AACb;AACA;AACA,kBAAkB,mBAAO,CAAC,sBAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,cAAc;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,EAAE;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,Y","sources":["webpack://@zephsinx/streamerworm/./src/constants.js","webpack://@zephsinx/streamerworm/webpack/bootstrap","webpack://@zephsinx/streamerworm/./src/streamerworm.js"],"sourcesContent":["// StreamerWorm constants.\r\nexports.DefaultMinMinutes = 30;\r\nexports.DefaultMaxMinutes = 90;\r\n\r\nexports.DefaultMaxHeight = '25'; // Percentage value\r\nexports.DefaultMaxWidth = '25'; // Percentage value\r\n\r\nexports.DefaultMediaPath = 'default-media.gif';\r\n\r\nexports.ExtensionNotFoundError = 'Unable to determine file extension from media URL. Defaulting to `img` tag';\r\nexports.ExtensionNotSupportedError = 'File extension not yet supported. Defaulting to `img` tag\\'. Extension found: `{0}`';","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\r\n\r\n// Constants\r\nconst constants = require('./constants');\r\n\r\n// Global defaults\r\nconst defaultMinMillis = constants.DefaultMinMinutes * 60 * 1000;\r\nconst defaultMaxMillis = constants.DefaultMaxMinutes * 60 * 1000;\r\n\r\n// Global variables\r\nlet lastCorner;\r\nlet tagName;\r\nlet element;\r\nlet config;\r\nlet mediaReady = false;\r\n\r\n// Get config settings\r\ngetStreamerWormConfig()\r\n    .then(configVal => {\r\n        config = configVal;\r\n        tagName = getTagNameFromFile(config.mediaUrl);\r\n        element = prepareElement(tagName, config);\r\n    })\r\n    .then(() => {\r\n        // Create and append media element to media div\r\n        const mediaDiv = document.getElementById(\"media-div\");\r\n        mediaDiv.appendChild(element);\r\n    \r\n        // Initialize media loop if there was no issue fetching the media file\r\n        while (!mediaReady)\r\n        {\r\n            setTimeout(() => {}, 1000);\r\n        }\r\n        \r\n        playMedia(element);\r\n    });\r\n\r\n//#region Media Methods\r\n\r\n// Shows and plays media after a random delay, then hides the media after durationMillis expires\r\nfunction playMedia(element) {\r\n    // Skip delay between media plays when config.skipDelay == true\r\n    let delay = randomIntFromInterval(config.minDelay, config.maxDelay);\r\n    \r\n    // Display the image after the random delay expires\r\n    setTimeout(() => {\r\n        // Reset image source to replay in the case of a GIF\r\n        if (tagName === 'img') {\r\n            element.src = '';\r\n            element.src = config.mediaUrl;\r\n        }\r\n        // Restart video and play in the case of a WebM\r\n        else {\r\n            element.currentTime = 0;\r\n            element.play();\r\n        }\r\n        // Make media visible\r\n        element.style.visibility = 'visible';\r\n        \r\n        // Hide image/video after it plays for the desired duration, and requeue the media timer\r\n        setTimeout(() => {\r\n            element.style.visibility = 'hidden';\r\n            setPosition(element);\r\n            playMedia(element);\r\n        }, config.mediaDuration);\r\n    }, delay);\r\n}\r\n\r\n// Returns a random integer between min and max (inclusive)\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n\r\n// Set position of media element on page\r\nfunction setPosition(element) {\r\n    let corner = randomIntFromInterval(0, 3);\r\n    while (lastCorner === corner) {\r\n        corner = randomIntFromInterval(0, 3);\r\n    }\r\n    lastCorner = corner;\r\n\r\n    element.style.top = '';\r\n    element.style.bottom = '';\r\n    element.style.left = '';\r\n    element.style.right = '';\r\n\r\n    switch (corner) {\r\n        // 0: top left\r\n        case 0:\r\n            element.style.top = '0px';\r\n            element.style.left = '0px';\r\n            break;\r\n        // 1: top right\r\n        case 1:\r\n            element.style.top = '0px';\r\n            element.style.right = '0px';\r\n            break;\r\n        // 2: bottom right\r\n        case 2:\r\n            element.style.bottom = '0px';\r\n            element.style.right = '0px';\r\n            break;\r\n        // 3: bottom left\r\n        case 3:\r\n            element.style.bottom = '0px';\r\n            element.style.left = '0px';\r\n            break;\r\n    }\r\n}\r\n\r\n//#endregion\r\n\r\n//#region StreamerWorm configuration methods\r\n\r\n// Parse URL parameters from URL\r\nasync function getStreamerWormConfig() {\r\n    // Get parameters from browser URL\r\n    let urlParams = new Proxy(new URLSearchParams(window.location.search), {\r\n        get: (searchParams, prop) => searchParams.get(prop || ''),\r\n    });\r\n\r\n    // todo: (param) Image display coordinates (where on the screen should it show up)\r\n    let skipDelay = parseBool(urlParams.skipDelay);\r\n    let maxDelayMillis = getDelayMillis(skipDelay, urlParams.max, defaultMaxMillis);\r\n    let minDelayMillis = getDelayMillis(skipDelay, urlParams.min, defaultMinMillis);\r\n    let maxHeight = isValidNumericValue(urlParams.maxHeight) ? urlParams.maxHeight : constants.DefaultMaxHeight;\r\n    let maxWidth = isValidNumericValue(urlParams.maxWidth) ? urlParams.maxWidth : constants.DefaultMaxWidth;\r\n    let mediaUrl = urlParams.mediaUrl ? urlParams.mediaUrl : constants.DefaultMediaPath;\r\n    \r\n    let mediaDuration = getMediaDuration(mediaUrl);\r\n    \r\n    // let shouldRandomize = parseBool(urlParams.randomize);\r\n    // let slideshow = parseBool(urlParams.slideshow);\r\n    \r\n    let config = {\r\n        maxDelay: maxDelayMillis,            // The maximum delay between media plays (ignored if skipDelay is true)\r\n        minDelay: minDelayMillis,            // The minimum delay between media plays (ignored if skipDelay is true)\r\n        maxHeight: maxHeight,                // The maximum height the media should take up. Image will be resized to fit if larger\r\n        maxWidth: maxWidth,                  // The maximum width the media should take up. Image will be resized to fit if larger\r\n        mediaUrl: mediaUrl,                  // The URL or path of the media to display\r\n        mediaDuration: mediaDuration,        // The duration of the media to display, used for knowing how long to display it for\r\n        // shouldRandomize: shouldRandomize, // If the displayed media should be randomized from the media list (ignored if slideshow is false)\r\n        // slideshow: slideshow,             // If the displayed media should change on each loop\r\n    };\r\n    \r\n    return validateConfig(config);\r\n}\r\n\r\n// Validate and update config if invalid.\r\nfunction validateConfig(config) {\r\n    // minDelayMillis must be less than or equal to maxDelayMillis, else use defaults\r\n    if (config.maxDelayMillis < config.minDelayMillis)\r\n    {\r\n        config.maxDelayMillis = defaultMaxMillis;\r\n        config.minDelayMillis = defaultMinMillis;\r\n    }\r\n    \r\n    if (config.mediaDuration < 100)\r\n        config.mediaDuration = 100;\r\n    \r\n    return config;\r\n}\r\n\r\n// Validate and calculate delay in milliseconds from params\r\nfunction getDelayMillis(skipDelay, delayMinutes, defaultDelay) {\r\n    if (skipDelay)\r\n        return 0;\r\n\r\n    return isValidNumericValue(delayMinutes) ? (delayMinutes * 60 * 1000) : defaultDelay;\r\n}\r\n\r\n// Check that provided string is a valid number and positive\r\nfunction isValidNumericValue(numberString) {\r\n    return !isNaN(numberString) && !isNaN(parseFloat(numberString)) && parseFloat(numberString) > 0;\r\n}\r\n\r\n// Returns the value of a string as a boolean. Defaults to \"false\" if not a valid boolean\r\nfunction parseBool(boolString) {\r\n    return boolString === 'true';\r\n}\r\n\r\n// todo: Understand why this works\r\n// Fancy method to get Media length\r\nasync function getMediaDuration(mediaUrl) {\r\n    fetch(mediaUrl, { mode: 'cors' })\r\n        .catch(err => {\r\n            console.log(err);\r\n        })\r\n        .then(res =>\r\n            res.arrayBuffer()\r\n        )\r\n        .then(ab =>\r\n            getGifDuration(new Uint8Array(ab))\r\n        );\r\n        // mediaErrorReason = 'Error getting media length with reason: [' + reason + ']. Media will not play';\r\n\r\n    /** @param {Uint8Array} uint8 */\r\n    function getGifDuration (uint8) {\r\n        let duration = 0\r\n        for (let i = 0, len = uint8.length; i < len; i++) {\r\n            if (uint8[i] === 0x21\r\n                && uint8[i + 1] === 0xF9\r\n                && uint8[i + 2] === 0x04\r\n                && uint8[i + 7] === 0x00)\r\n            {\r\n                const delay = (uint8[i + 5] << 8) | (uint8[i + 4] & 0xFF)\r\n                duration += delay < 2 ? 10 : delay\r\n            }\r\n        }\r\n        // Convert to milliseconds\r\n        return duration * 10\r\n    }\r\n}\r\n\r\nfunction promiseFailure(error) {\r\n    console.log(error);\r\n}\r\n\r\n//#endregion\r\n\r\n//#region Element Configuration\r\n\r\n// Configure element to display based on tagName\r\nfunction prepareElement(tagName, config) {\r\n    // Create img or video element based on tagName\r\n    let mediaElement = document.createElement(tagName);\r\n    mediaElement.id = 'rendered-media';\r\n    mediaElement.style.objectFit = 'contain';\r\n    mediaElement.style.maxHeight = config.maxHeight + '%';\r\n    mediaElement.style.maxWidth = config.maxWidth + '%';\r\n    mediaElement.style.position = 'absolute';\r\n\r\n    setPosition(mediaElement);\r\n    \r\n    switch (tagName) {\r\n        case 'img':\r\n            return configureImageElement(mediaElement);\r\n        case 'video':\r\n            return configureVideoElement(mediaElement, config.mediaUrl);\r\n        default:\r\n            throw 'Tag name ' + tagName + ' not recognized';\r\n    }\r\n}\r\n\r\n// Get the appropriate element tag name from the media file extension\r\nfunction getTagNameFromFile(fileName) {\r\n    let fileExtension = getFileExtension(fileName)\r\n\r\n    switch (fileExtension) {\r\n        case 'apng':\r\n        case 'avif':\r\n        case 'gif':\r\n        case 'jpg':\r\n        case 'jpeg':\r\n        case 'jpe':\r\n        case 'jif':\r\n        case 'png':\r\n        case 'svg':\r\n        case 'jfif':\r\n        case 'webp':\r\n            return 'img';\r\n        case 'webm':\r\n            return 'video';\r\n        default: {\r\n            if (!fileExtension)\r\n                console.warn(constants.ExtensionNotFoundError);\r\n            else\r\n                console.warn(constants.ExtensionNotSupportedError.replace('{0}', fileExtension));\r\n        }\r\n        \r\n        return 'img';\r\n    }\r\n}\r\n\r\n// Get extension from file path\r\nfunction getFileExtension(fileName) {\r\n    return fileName.slice((Math.max(0, fileName.lastIndexOf(\".\")) || Infinity) + 1);\r\n}\r\n\r\n// Set Image properties\r\nfunction configureImageElement(image) {\r\n    // todo: Configure image\r\n    return image;\r\n}\r\n\r\n// Set Video properties\r\nfunction configureVideoElement(videoElement, mediaUrl) {\r\n    let videoSource = document.createElement('source');\r\n    videoSource.src = mediaUrl;\r\n    videoSource.type = 'video/webm';\r\n\r\n    // Note: autoplay only works in Chrome after a user has interacted with the DOM unless the muted tag is used\r\n    videoElement.autoplay = true;\r\n    // videoElement.muted = 'muted'; // Needed to autoplay in Chrome browser after Chrome 66\r\n    videoElement.appendChild(videoSource);\r\n\r\n    return videoElement;\r\n}\r\n\r\n//#endregion"],"names":[],"sourceRoot":""}