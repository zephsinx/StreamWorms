{"version":3,"file":"assets/js/main.a51584cc.js","mappings":"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","sources":["webpack://@zephsinx/streamerworm/./src/utils/constants.js","webpack://@zephsinx/streamerworm/webpack/bootstrap","webpack://@zephsinx/streamerworm/./src/streamerworm.js"],"sourcesContent":["// StreamerWorm constants.\r\nexports.DefaultMinMinutes = 30;\r\nexports.DefaultMaxMinutes = 90;\r\n\r\nexports.DefaultMaxHeight = \"25\"; // Percentage value\r\nexports.DefaultMaxWidth = \"25\"; // Percentage value\r\n\r\n// Warning messages\r\nexports.ZeroMediaDurationWarning = \"Unable to calculate media duration for the requested media. Please set the media duration (in seconds) via the `mediaDuration` parameter. Parameter supports decimal values.\";\r\n\r\n// Error messages\r\nexports.ExtensionNotFoundError = \"Unable to determine file extension from media URL. Defaulting to `img` tag\";\r\nexports.ExtensionNotSupportedError = \"File extension not yet supported. Defaulting to `img` tag\\\". Extension found: `{0}`\";\r\nexports.FetchImageError = \"Error fetching image from URL '{0}'. Error status: '{1}'\";\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\r\n\r\n// Constants\r\nconst constants = require('./utils/constants');\r\n\r\n// Global defaults\r\nconst defaultMinMillis = constants.DefaultMinMinutes * 60 * 1000;\r\nconst defaultMaxMillis = constants.DefaultMaxMinutes * 60 * 1000;\r\n\r\n// Div containing the media to display\r\nconst mediaDiv = document.getElementById(\"media-div\");\r\n\r\n// Global variables\r\nlet lastCorner;\r\nlet tagName;\r\nlet element;\r\nlet config;\r\n\r\n// Get config settings\r\ngetStreamerWormConfig()\r\n    .then(configVal => {\r\n        config = configVal;\r\n        tagName = getTagNameFromFile(config.mediaUrl);\r\n        element = prepareElement(tagName, config);\r\n    })\r\n    .then(() => {\r\n        // Create and append media element to media div\r\n        mediaDiv.appendChild(element);\r\n        playMedia(element);\r\n    });\r\n\r\n//#region Media Methods\r\n\r\n// Shows and plays media after a random delay, then hides the media after durationMillis expires\r\nfunction playMedia(element) {\r\n    // Skip delay between media plays when config.skipDelay == true\r\n    let delay = randomIntFromInterval(config.minDelay, config.maxDelay);\r\n    \r\n    // Display the image after the random delay expires\r\n    setTimeout(() => {\r\n        // Reset image source to replay in the case of a GIF\r\n        if (tagName === 'img') {\r\n            element.src = '';\r\n            element.src = config.mediaUrl;\r\n        }\r\n        // Restart video and play in the case of a WebM\r\n        else {\r\n            element.currentTime = 0;\r\n            element.play();\r\n        }\r\n        // Make media visible\r\n        mediaDiv.style.visibility = 'visible';\r\n        \r\n        // Hide image/video after it plays for the desired duration, and requeue the media timer\r\n        setTimeout(() => {\r\n            mediaDiv.style.visibility = 'hidden';\r\n            setPosition(element);\r\n            playMedia(element);\r\n        }, config.mediaDuration);\r\n    }, delay);\r\n}\r\n\r\n// Returns a random integer between min and max (inclusive)\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n\r\n// Set position of media element on page\r\nfunction setPosition(element) {\r\n    let corner = randomIntFromInterval(0, 3);\r\n    while (lastCorner === corner) {\r\n        corner = randomIntFromInterval(0, 3);\r\n    }\r\n    lastCorner = corner;\r\n\r\n    element.style.top = '';\r\n    element.style.bottom = '';\r\n    element.style.left = '';\r\n    element.style.right = '';\r\n\r\n    switch (corner) {\r\n        // 0: top left\r\n        case 0:\r\n            element.style.top = '0px';\r\n            element.style.left = '0px';\r\n            break;\r\n        // 1: top right\r\n        case 1:\r\n            element.style.top = '0px';\r\n            element.style.right = '0px';\r\n            break;\r\n        // 2: bottom right\r\n        case 2:\r\n            element.style.bottom = '0px';\r\n            element.style.right = '0px';\r\n            break;\r\n        // 3: bottom left\r\n        case 3:\r\n            element.style.bottom = '0px';\r\n            element.style.left = '0px';\r\n            break;\r\n    }\r\n}\r\n\r\n//#endregion\r\n\r\n//#region StreamerWorm configuration methods\r\n\r\n// Parse URL parameters from URL\r\nasync function getStreamerWormConfig() {\r\n    // Get parameters from browser URL\r\n    let urlParams = new Proxy(new URLSearchParams(window.location.search), {\r\n        get: (searchParams, prop) => searchParams.get(prop || ''),\r\n    });\r\n\r\n    let defaultMediaUrl = document.getElementById('media-url').innerHTML;\r\n\r\n    let skipDelay = parseBool(urlParams.skipDelay);\r\n    let maxDelayMillis = getDelayMillis(skipDelay, urlParams.max, defaultMaxMillis);\r\n    let minDelayMillis = getDelayMillis(skipDelay, urlParams.min, defaultMinMillis);\r\n    let maxHeight = isValidNumericValue(urlParams.maxHeight) ? urlParams.maxHeight : constants.DefaultMaxHeight;\r\n    let maxWidth = isValidNumericValue(urlParams.maxWidth) ? urlParams.maxWidth : constants.DefaultMaxWidth;\r\n    let mediaUrl = urlParams.mediaUrl ? urlParams.mediaUrl : defaultMediaUrl;\r\n    let mediaDuration = isValidNumericValue(urlParams.mediaDuration) ? (urlParams.mediaDuration * 1000) : await getMediaDuration(mediaUrl);\r\n    \r\n    // let shouldRandomize = parseBool(urlParams.randomize);\r\n    // let slideshow = parseBool(urlParams.slideshow);\r\n    \r\n    let config = {\r\n        skipDelay: skipDelay,\r\n        maxDelay: maxDelayMillis,            // The maximum delay between media plays (ignored if skipDelay is true)\r\n        minDelay: minDelayMillis,            // The minimum delay between media plays (ignored if skipDelay is true)\r\n        maxHeight: maxHeight,                // The maximum height the media should take up. Image will be resized to fit if larger\r\n        maxWidth: maxWidth,                  // The maximum width the media should take up. Image will be resized to fit if larger\r\n        mediaUrl: mediaUrl,                  // The URL or path of the media to display\r\n        mediaDuration: mediaDuration,        // The duration of the media to display, used for knowing how long to display it for. In milliseconds.\r\n        // shouldRandomize: shouldRandomize, // If the displayed media should be randomized from the media list (ignored if slideshow is false)\r\n        // slideshow: slideshow,             // If the displayed media should change on each loop\r\n    };\r\n    \r\n    return validateConfig(config);\r\n}\r\n\r\n// Validate and update config if invalid.\r\nfunction validateConfig(config) {\r\n    // minDelayMillis must be less than or equal to maxDelayMillis, else use defaults\r\n    if (config.maxDelayMillis < config.minDelayMillis)\r\n    {\r\n        config.maxDelayMillis = defaultMaxMillis;\r\n        config.minDelayMillis = defaultMinMillis;\r\n    }\r\n    \r\n    if (config.mediaDuration === 0) {\r\n        throw new Error(constants.ZeroMediaDurationWarning);\r\n    }\r\n    \r\n    return config;\r\n}\r\n\r\n// Validate and calculate delay in milliseconds from params\r\nfunction getDelayMillis(skipDelay, delayMinutes, defaultDelay) {\r\n    if (skipDelay)\r\n        return 0;\r\n\r\n    return isValidNumericValue(delayMinutes) ? (delayMinutes * 60 * 1000) : defaultDelay;\r\n}\r\n\r\n// Check that provided string is a valid number and positive\r\nfunction isValidNumericValue(numberString) {\r\n    return !isNaN(numberString) && !isNaN(parseFloat(numberString)) && parseFloat(numberString) > 0;\r\n}\r\n\r\n// Returns the value of a string as a boolean. Defaults to \"false\" if not a valid boolean\r\nfunction parseBool(boolString) {\r\n    return boolString === 'true';\r\n}\r\n\r\n// Fancy method to get Media length\r\nasync function getMediaDuration(mediaUrl) {\r\n    return await fetch(mediaUrl, { mode: 'cors' })\r\n        .then(res => {\r\n            if (res.ok)\r\n                return Promise.resolve(res);\r\n            return Promise.reject(res);\r\n        })\r\n        .then(res => res.arrayBuffer())\r\n        .then(ab => getGifDuration(new Uint8Array(ab)))\r\n        .catch(err => {\r\n            throw new Error(constants.FetchImageError.replace('{0}', mediaUrl).replace('{1}', `${err.status} - ${err.statusText}`));\r\n        });\r\n\r\n    /** @param {Uint8Array} uint8 */\r\n    function getGifDuration (uint8) {\r\n        let duration = 0\r\n        for (let i = 0, len = uint8.length; i < len; i++) {\r\n            if (uint8[i] === 0x21\r\n                && uint8[i + 1] === 0xF9\r\n                && uint8[i + 2] === 0x04\r\n                && uint8[i + 7] === 0x00)\r\n            {\r\n                const delay = (uint8[i + 5] << 8) | (uint8[i + 4] & 0xFF)\r\n                duration += delay < 2 ? 10 : delay\r\n            }\r\n        }\r\n        // Convert to milliseconds\r\n        return duration * 10\r\n    }\r\n}\r\n\r\n//#endregion\r\n\r\n//#region Element Configuration\r\n\r\n// Configure element to display based on tagName\r\nfunction prepareElement(tagName, config) {\r\n    // Create img or video element based on tagName\r\n    let mediaElement = document.createElement(tagName);\r\n    mediaElement.id = 'rendered-media';\r\n    mediaElement.style.objectFit = 'contain';\r\n    mediaElement.style.maxHeight = config.maxHeight + '%';\r\n    mediaElement.style.maxWidth = config.maxWidth + '%';\r\n    mediaElement.style.position = 'absolute';\r\n\r\n    setPosition(mediaElement);\r\n    \r\n    switch (tagName) {\r\n        case 'img':\r\n            return mediaElement;\r\n        case 'video':\r\n            return configureVideoElement(mediaElement, config.mediaUrl);\r\n        default:\r\n            throw 'Tag name ' + tagName + ' not recognized';\r\n    }\r\n}\r\n\r\n// Get the appropriate element tag name from the media file extension\r\nfunction getTagNameFromFile(fileName) {\r\n    let fileExtension = getFileExtension(fileName)\r\n\r\n    switch (fileExtension) {\r\n        case 'apng':\r\n        case 'avif':\r\n        case 'gif':\r\n        case 'jpg':\r\n        case 'jpeg':\r\n        case 'jpe':\r\n        case 'jif':\r\n        case 'png':\r\n        case 'svg':\r\n        case 'jfif':\r\n        case 'webp':\r\n            return 'img';\r\n        case 'webm':\r\n            return 'video';\r\n        default: {\r\n            if (!fileExtension)\r\n                console.warn(constants.ExtensionNotFoundError);\r\n            else\r\n                console.warn(constants.ExtensionNotSupportedError.replace('{0}', fileExtension));\r\n        }\r\n        \r\n        return 'img';\r\n    }\r\n}\r\n\r\n// Get extension from file path\r\nfunction getFileExtension(fileName) {\r\n    return fileName.slice((Math.max(0, fileName.lastIndexOf(\".\")) || Infinity) + 1);\r\n}\r\n\r\n// Set Video properties\r\nfunction configureVideoElement(videoElement, mediaUrl) {\r\n    let videoSource = document.createElement('source');\r\n    videoSource.src = mediaUrl;\r\n    videoSource.type = 'video/webm';\r\n\r\n    // Note: autoplay only works in Chrome after a user has interacted with the DOM unless the muted tag is used\r\n    videoElement.autoplay = true;\r\n    // videoElement.muted = 'muted'; // Needed to autoplay in Chrome browser after Chrome 66\r\n    videoElement.appendChild(videoSource);\r\n\r\n    return videoElement;\r\n}\r\n\r\n//#endregion"],"names":["exports","DefaultMinMinutes","DefaultMaxMinutes","DefaultMaxHeight","DefaultMaxWidth","ZeroMediaDurationWarning","ExtensionNotFoundError","ExtensionNotSupportedError","FetchImageError","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","module","__webpack_modules__","constants","defaultMinMillis","defaultMaxMillis","mediaDiv","document","getElementById","lastCorner","tagName","element","config","playMedia","delay","randomIntFromInterval","minDelay","maxDelay","setTimeout","src","mediaUrl","currentTime","play","style","visibility","setPosition","mediaDuration","min","max","Math","floor","random","corner","top","bottom","left","right","getDelayMillis","skipDelay","delayMinutes","defaultDelay","isValidNumericValue","numberString","isNaN","parseFloat","async","urlParams","Proxy","URLSearchParams","window","location","search","get","searchParams","prop","defaultMediaUrl","innerHTML","maxDelayMillis","minDelayMillis","maxHeight","maxWidth","fetch","mode","then","res","ok","Promise","resolve","reject","arrayBuffer","ab","uint8","duration","i","len","length","getGifDuration","Uint8Array","catch","err","Error","replace","status","statusText","getMediaDuration","validateConfig","getStreamerWormConfig","configVal","fileName","fileExtension","slice","lastIndexOf","Infinity","getFileExtension","console","warn","getTagNameFromFile","mediaElement","createElement","id","objectFit","position","videoElement","videoSource","type","autoplay","appendChild","configureVideoElement","prepareElement"],"sourceRoot":""}