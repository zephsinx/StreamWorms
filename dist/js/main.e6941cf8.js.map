{"version":3,"file":"js/main.e6941cf8.js","mappings":"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","sources":["webpack://@zephsinx/streamworms/./src/streamworms/utils/constants.js","webpack://@zephsinx/streamworms/./src/streamworms/utils/utils.js","webpack://@zephsinx/streamworms/webpack/bootstrap","webpack://@zephsinx/streamworms/./src/streamworms/streamworms.js"],"sourcesContent":["// streamworms constants.\r\nconst DefaultMinMinutes = 30;\r\nconst DefaultMaxMinutes = 90;\r\n\r\nconst DefaultMaxHeight = \"25\"; // Percentage value\r\nconst DefaultMaxWidth = \"25\"; // Percentage value\r\n\r\n// Warning messages\r\nconst ZeroMediaDurationWarning = \"Unable to calculate media duration for the requested media. Please set the media duration (in seconds) via the `mediaDuration` parameter. Parameter supports decimal values.\";\r\n\r\n// Error messages\r\nconst ContentTypeNotFoundError = \"Unable to determine content type of from media URL. Defaulting to `img` tag\";\r\nconst ContentTypeNotSupportedError = \"Content type not yet supported. Defaulting to `img` tag\\\". Content type found: `{0}`\";\r\nconst FetchImageError = \"Error fetching image from URL '{0}'. Error status: '{1}'\";\r\n\r\nmodule.exports = Object.freeze({\r\n    DefaultMinMinutes: DefaultMinMinutes,\r\n    DefaultMaxMinutes: DefaultMaxMinutes,\r\n    DefaultMaxHeight: DefaultMaxHeight,\r\n    DefaultMaxWidth: DefaultMaxWidth,\r\n    ZeroMediaDurationWarning: ZeroMediaDurationWarning,\r\n    ContentTypeNotFoundError: ContentTypeNotFoundError,\r\n    ContentTypeNotSupportedError: ContentTypeNotSupportedError,\r\n    FetchImageError: FetchImageError,\r\n});","ï»¿/*\r\n1. There are 4 quadrants (0-3)\r\n   - Quadrants are numbered left to right, top to bottom, as such:\r\n       | 0 | 1 |\r\n       | 2 | 3 |\r\n   - Evens on the left, odds on the right\r\n2. Each quadrant is window.innerWidth * 0.25 in width and window.innerHeight * 0.25 in height\r\n3. Pick a quadrant (0-3) via random int\r\n   - Should be different to the previous quadrant\r\n4. Generate random x and y coordinates within the quadrant size\r\n    - If odd quadrant, recalculate quadrant x if quadrant x + mediaWidth > quadrantWidth\r\n    - If quadrant > 1, recalculate quadrant y if quadrant y + mediaHeight > quadrantHeight\r\n5. Set the media x and y coordinates\r\n   - If odd quadrant, x = (window.innerWidth * 0.5) + quadrant x\r\n   - If even quadrant, x = quadrant x\r\n   - If quadrant > 1, y = window.innerHeight * 0.5 + quadrant y\r\n   - If quadrant < 1, y = quadrant y\r\n*/\r\nconst getMediaCoordinateStyles = function (lastQuadrant, mediaHeight, mediaWidth) {\r\n    let x;\r\n    let y;\r\n    let quadrantX;\r\n    let quadrantY;\r\n    let newQuadrant;\r\n\r\n    let windowHeight = window.innerHeight;\r\n    let windowWidth = window.innerWidth;\r\n    let quadrantHeight = windowHeight * 0.5;\r\n    let quadrantWidth = windowWidth * 0.5;\r\n\r\n    // Pick random quadrant, different to the previous\r\n    do {\r\n        newQuadrant = Math.floor(Math.random() * 4);\r\n    } while (newQuadrant === lastQuadrant);\r\n\r\n    // Pick a random value for media x, ensuring the image remains on-screen\r\n    do {\r\n        quadrantX = Math.floor(Math.random() * quadrantWidth);\r\n    } while (quadrantX + mediaWidth > quadrantWidth);\r\n\r\n    // Pick a random value for media y, ensuring the image remains on-screen\r\n    do {\r\n        quadrantY = Math.floor(Math.random() * quadrantHeight);\r\n    } while (quadrantY + mediaHeight > quadrantHeight);\r\n\r\n    x = newQuadrant % 2 === 0 ? quadrantX : quadrantWidth + quadrantX;\r\n    y = newQuadrant < 2 ? quadrantY : quadrantHeight + quadrantY;\r\n\r\n    return {quadrant: newQuadrant, left: `${x}px`, top: `${y}px`};\r\n}\r\n\r\n// Returns a random integer between min and max (inclusive)\r\nconst randomIntFromInterval = function (min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    getMediaCoordinateStyles: getMediaCoordinateStyles,\r\n    randomIntFromInterval: randomIntFromInterval,\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\r\n\r\nconst constants = require('./utils/constants');\r\nconst utils = require('./utils/utils');\r\n\r\n// Global defaults\r\n\r\nconst defaultMinMillis = constants.DefaultMinMinutes * 60 * 1000;\r\nconst defaultMaxMillis = constants.DefaultMaxMinutes * 60 * 1000;\r\nconst defaultMediaUrl = '/media';\r\n\r\n// Div containing the media to display\r\nconst mediaDiv = document.getElementById(\"media-div\");\r\n\r\n// Global variables\r\n\r\nlet lastQuadrant;\r\nlet tagName;\r\nlet element;\r\nlet config;\r\nlet first = true;\r\n\r\n// Get config settings\r\ngetStreamWormsConfig()\r\n    .then(configVal => {\r\n        config = configVal;\r\n        tagName = getTagNameFromFile(config.contentType);\r\n        element = prepareElement(tagName, config);\r\n    })\r\n    .then(() => {\r\n        // Create and append media element to media div\r\n        mediaDiv.appendChild(element);\r\n        playMedia(element);\r\n    });\r\n\r\n//#region Media Methods\r\n\r\n// Shows and plays media after a random delay, then hides the media after durationMillis expires\r\nfunction playMedia(element) {\r\n    let delay = utils.randomIntFromInterval(config.minDelay, config.maxDelay);\r\n    if (first) {\r\n        delay = 0;\r\n        first = false;\r\n    }\r\n    // Display the image after the random delay expires\r\n    setTimeout(() => {\r\n        // Reset image source to replay in the case of a GIF\r\n        if (tagName === 'img') {\r\n            element.src = '';\r\n            element.src = config.mediaUrl;\r\n        }\r\n        // Restart video and play in the case of a WebM\r\n        else {\r\n            element.currentTime = 0;\r\n            element.play();\r\n        }\r\n        // Make media visible\r\n        mediaDiv.style.visibility = 'visible';\r\n\r\n        // Hide image/video after it plays for the desired duration, and requeue the media timer\r\n        setTimeout(() => {\r\n            mediaDiv.style.visibility = 'hidden';\r\n            setPosition(element);\r\n            playMedia(element);\r\n        }, config.mediaDuration);\r\n    }, delay);\r\n}\r\n\r\n// Set position of media element on page\r\nfunction setPosition(element) {\r\n    let coordinates = utils.getMediaCoordinateStyles(lastQuadrant, element.height, element.width);\r\n    lastQuadrant = coordinates.quadrant;\r\n    element.style.left = coordinates.left;\r\n    element.style.top = coordinates.top;\r\n}\r\n\r\n//#endregion\r\n\r\n//#region StreamWorms configuration methods\r\n\r\n// Parse URL parameters from URL\r\nasync function getStreamWormsConfig() {\r\n    // Get parameters from browser URL\r\n    let urlParams = new Proxy(new URLSearchParams(window.location.search), {\r\n        get: (searchParams, prop) => searchParams.get(prop || ''),\r\n    });\r\n\r\n    let skipDelay = parseBool(urlParams.skipDelay);\r\n    let maxDelayMillis = getDelayMillis(skipDelay, urlParams.max, defaultMaxMillis);\r\n    let minDelayMillis = getDelayMillis(skipDelay, urlParams.min, defaultMinMillis);\r\n    let maxHeight = isValidNumericValue(urlParams.maxHeight) ? urlParams.maxHeight : constants.DefaultMaxHeight;\r\n    let maxWidth = isValidNumericValue(urlParams.maxWidth) ? urlParams.maxWidth : constants.DefaultMaxWidth;\r\n    let mediaUrl = urlParams.mediaUrl ? urlParams.mediaUrl : defaultMediaUrl;\r\n    let mediaInfo = await fetchMediaInfo(mediaUrl);\r\n    let mediaDuration = isValidNumericValue(urlParams.mediaDuration) ? (urlParams.mediaDuration * 1000) : mediaInfo.duration || 0;\r\n\r\n    let config = {\r\n        skipDelay: skipDelay,\r\n        maxDelay: maxDelayMillis,            // The maximum delay between media plays (ignored if skipDelay is true)\r\n        minDelay: minDelayMillis,            // The minimum delay between media plays (ignored if skipDelay is true)\r\n        maxHeight: maxHeight,                // The maximum height the media should take up. Image will be resized to fit if larger\r\n        maxWidth: maxWidth,                  // The maximum width the media should take up. Image will be resized to fit if larger\r\n        mediaUrl: mediaUrl,                  // The URL or path of the media to display\r\n        mediaDuration: mediaDuration,        // The duration of the media to display, used for knowing how long to display it for. In milliseconds\r\n        contentType: mediaInfo.contentType,  // Content type of the downloaded media\r\n    };\r\n\r\n    return validateConfig(config);\r\n}\r\n\r\n// Validate and update config if invalid.\r\nfunction validateConfig(config) {\r\n    // minDelayMillis must be less than or equal to maxDelayMillis, else use defaults\r\n    if (config.maxDelayMillis < config.minDelayMillis) {\r\n        config.maxDelayMillis = defaultMaxMillis;\r\n        config.minDelayMillis = defaultMinMillis;\r\n    }\r\n\r\n    if (config.mediaDuration === 0) {\r\n        throw new Error(constants.ZeroMediaDurationWarning);\r\n    }\r\n\r\n    return config;\r\n}\r\n\r\n// Validate and calculate delay in milliseconds from params\r\nfunction getDelayMillis(skipDelay, delayMinutes, defaultDelay) {\r\n    if (skipDelay)\r\n        return 0;\r\n\r\n    return isValidNumericValue(delayMinutes) ? (delayMinutes * 60 * 1000) : defaultDelay;\r\n}\r\n\r\n// Check that provided string is a valid number and positive\r\nfunction isValidNumericValue(numberString) {\r\n    return !isNaN(numberString) && !isNaN(parseFloat(numberString)) && parseFloat(numberString) > 0;\r\n}\r\n\r\n// Returns the value of a string as a boolean. Defaults to \"false\" if not a valid boolean\r\nfunction parseBool(boolString) {\r\n    return boolString === 'true';\r\n}\r\n\r\n// Fetch media file\r\nasync function fetchMediaInfo(mediaUrl) {\r\n    let contentType;\r\n    let duration = await fetch(mediaUrl, {mode: 'cors'})\r\n        .then(res => {\r\n            if (res.ok) {\r\n                {\r\n                    contentType = res.headers.get(\"Content-Type\");\r\n                    return Promise.resolve(res);\r\n                }\r\n            }\r\n            return Promise.reject(res);\r\n        })\r\n        .then(res => res.arrayBuffer())\r\n        .then(ab => getMediaDuration(new Uint8Array(ab)))\r\n        .catch(err => {\r\n            throw new Error(constants.FetchImageError.replace('{0}', mediaUrl).replace('{1}', `${err.status} - ${err.statusText}`));\r\n        });\r\n\r\n    return {contentType: contentType, duration: duration};\r\n}\r\n\r\n// Fancy method to get Media length\r\nfunction getMediaDuration(uint8) {\r\n    let duration = 0;\r\n    for (let i = 0, len = uint8.length; i < len; i++) {\r\n        if (uint8[i] === 0x21\r\n            && uint8[i + 1] === 0xF9\r\n            && uint8[i + 2] === 0x04\r\n            && uint8[i + 7] === 0x00) {\r\n            const delay = (uint8[i + 5] << 8) | (uint8[i + 4] & 0xFF)\r\n            duration += delay < 2 ? 10 : delay\r\n        }\r\n    }\r\n    // Convert to milliseconds\r\n    return duration * 10\r\n}\r\n\r\n//#endregion\r\n\r\n//#region Element Configuration\r\n\r\n// Configure element to display based on tagName\r\nfunction prepareElement(tagName, config) {\r\n    // Create img or video element based on tagName\r\n    let mediaElement = document.createElement(tagName);\r\n    mediaElement.id = 'rendered-media';\r\n    mediaElement.style.objectFit = 'contain';\r\n    mediaElement.style.maxHeight = config.maxHeight + '%';\r\n    mediaElement.style.maxWidth = config.maxWidth + '%';\r\n    mediaElement.style.position = 'absolute';\r\n    mediaElement.style.top = '0';\r\n    mediaElement.style.left = '0';\r\n    mediaElement.alt = 'Just a lil\\' worm guy';\r\n\r\n    switch (tagName) {\r\n        case 'img':\r\n            return mediaElement;\r\n        case 'video':\r\n            return configureVideoElement(mediaElement, config);\r\n        default:\r\n            throw new Error(`Tag name ${tagName} not recognized`);\r\n    }\r\n}\r\n\r\n// Get the appropriate element tag name from the media file extension\r\nfunction getTagNameFromFile(contentType) {\r\n    switch (contentType) {\r\n        case 'image/avif':\r\n        case 'image/gif':\r\n        case 'image/jpeg':\r\n        case 'image/png':\r\n        case 'image/svg+xml':\r\n        case 'image/webp':\r\n        case contentType.startsWith('image/'):\r\n            return 'img';\r\n        case 'video/webm':\r\n        case contentType.startsWith('video/'):\r\n            return 'video';\r\n        default: {\r\n            if (!contentType)\r\n                console.warn(constants.ContentTypeNotFoundError);\r\n            else\r\n                console.warn(constants.ContentTypeNotSupportedError.replace('{0}', contentType));\r\n        }\r\n            return 'img';\r\n    }\r\n}\r\n\r\n// Set Video properties\r\nfunction configureVideoElement(videoElement, config) {\r\n    let videoSource = document.createElement('source');\r\n    videoSource.src = config.mediaUrl;\r\n    videoSource.type = config.contentType;\r\n\r\n    // Note: autoplay only works in Chrome after a user has interacted with the DOM unless the muted tag is used\r\n    videoElement.autoplay = true;\r\n    videoElement.appendChild(videoSource);\r\n\r\n    return videoElement;\r\n}\r\n\r\n//#endregion"],"names":["module","exports","Object","freeze","DefaultMinMinutes","DefaultMaxMinutes","DefaultMaxHeight","DefaultMaxWidth","ZeroMediaDurationWarning","ContentTypeNotFoundError","ContentTypeNotSupportedError","FetchImageError","getMediaCoordinateStyles","lastQuadrant","mediaHeight","mediaWidth","x","y","quadrantX","quadrantY","newQuadrant","quadrantHeight","window","innerHeight","quadrantWidth","innerWidth","Math","floor","random","quadrant","left","top","randomIntFromInterval","min","max","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","constants","utils","defaultMinMillis","defaultMaxMillis","mediaDiv","document","getElementById","tagName","element","config","first","playMedia","delay","minDelay","maxDelay","setTimeout","src","mediaUrl","currentTime","play","style","visibility","coordinates","height","width","setPosition","mediaDuration","getDelayMillis","skipDelay","delayMinutes","defaultDelay","isValidNumericValue","numberString","isNaN","parseFloat","async","urlParams","Proxy","URLSearchParams","location","search","get","searchParams","prop","maxDelayMillis","minDelayMillis","maxHeight","maxWidth","mediaInfo","contentType","duration","fetch","mode","then","res","ok","headers","Promise","resolve","reject","arrayBuffer","ab","uint8","i","len","length","getMediaDuration","Uint8Array","catch","err","Error","replace","status","statusText","fetchMediaInfo","validateConfig","getStreamWormsConfig","configVal","startsWith","console","warn","getTagNameFromFile","mediaElement","createElement","id","objectFit","position","alt","videoElement","videoSource","type","autoplay","appendChild","configureVideoElement","prepareElement"],"sourceRoot":""}